
SimplePOV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000060e  00800100  000002a8  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080070e  0080070e  0000096a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000096a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000096d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000079e  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000674  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000030a  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003a6  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000013b  00000000  00000000  00001f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  000020bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	17 e0       	ldi	r17, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b7 e0       	ldi	r27, 0x07	; 7
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 20 01 	call	0x240	; 0x240 <main>
  9e:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:

unsigned short pos=0; // Data position index

// Timer ISR
ISR(TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	// LED control.
	PORTC &= ~0b111111;
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	80 7c       	andi	r24, 0xC0	; 192
  d0:	88 b9       	out	0x08, r24	; 8
	PORTC |= ~font[(int)str[pos / 6]][pos % 6] & 0b111111; // 6LSB
  d2:	c8 b1       	in	r28, 0x08	; 8
  d4:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <__data_end>
  d8:	f0 91 0f 07 	lds	r31, 0x070F	; 0x80070f <__data_end+0x1>
  dc:	9f 01       	movw	r18, r30
  de:	ab ea       	ldi	r26, 0xAB	; 171
  e0:	ba ea       	ldi	r27, 0xAA	; 170
  e2:	0e 94 43 01 	call	0x286	; 0x286 <__umulhisi3>
  e6:	9c 01       	movw	r18, r24
  e8:	36 95       	lsr	r19
  ea:	27 95       	ror	r18
  ec:	36 95       	lsr	r19
  ee:	27 95       	ror	r18
  f0:	d9 01       	movw	r26, r18
  f2:	a0 50       	subi	r26, 0x00	; 0
  f4:	bf 4f       	sbci	r27, 0xFF	; 255
  f6:	9c 91       	ld	r25, X
  f8:	49 2f       	mov	r20, r25
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	c9 01       	movw	r24, r18
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	28 0f       	add	r18, r24
 104:	39 1f       	adc	r19, r25
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	e2 1b       	sub	r30, r18
 10c:	f3 0b       	sbc	r31, r19
 10e:	ca 01       	movw	r24, r20
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	48 0f       	add	r20, r24
 116:	59 1f       	adc	r21, r25
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	43 5f       	subi	r20, 0xF3	; 243
 11e:	5e 4f       	sbci	r21, 0xFE	; 254
 120:	e4 0f       	add	r30, r20
 122:	f5 1f       	adc	r31, r21
 124:	80 81       	ld	r24, Z
 126:	80 95       	com	r24
 128:	8f 73       	andi	r24, 0x3F	; 63
 12a:	c8 2b       	or	r28, r24
 12c:	c8 b9       	out	0x08, r28	; 8
	PORTB &= ~0b11;
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	8c 7f       	andi	r24, 0xFC	; 252
 132:	85 b9       	out	0x05, r24	; 5
	PORTB |= ( ~font[(int)str[pos / 6]][pos % 6] >> 6) & 0b11; // 2MSB
 134:	e5 b1       	in	r30, 0x05	; 5
 136:	c0 91 0e 07 	lds	r28, 0x070E	; 0x80070e <__data_end>
 13a:	d0 91 0f 07 	lds	r29, 0x070F	; 0x80070f <__data_end+0x1>
 13e:	9e 01       	movw	r18, r28
 140:	ab ea       	ldi	r26, 0xAB	; 171
 142:	ba ea       	ldi	r27, 0xAA	; 170
 144:	0e 94 43 01 	call	0x286	; 0x286 <__umulhisi3>
 148:	9c 01       	movw	r18, r24
 14a:	36 95       	lsr	r19
 14c:	27 95       	ror	r18
 14e:	36 95       	lsr	r19
 150:	27 95       	ror	r18
 152:	d9 01       	movw	r26, r18
 154:	a0 50       	subi	r26, 0x00	; 0
 156:	bf 4f       	sbci	r27, 0xFF	; 255
 158:	9c 91       	ld	r25, X
 15a:	49 2f       	mov	r20, r25
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	c9 01       	movw	r24, r18
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	28 0f       	add	r18, r24
 166:	39 1f       	adc	r19, r25
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	c2 1b       	sub	r28, r18
 16e:	d3 0b       	sbc	r29, r19
 170:	ca 01       	movw	r24, r20
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	48 0f       	add	r20, r24
 178:	59 1f       	adc	r21, r25
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	43 5f       	subi	r20, 0xF3	; 243
 180:	5e 4f       	sbci	r21, 0xFE	; 254
 182:	c4 0f       	add	r28, r20
 184:	d5 1f       	adc	r29, r21
 186:	88 81       	ld	r24, Y
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	80 95       	com	r24
 18c:	90 95       	com	r25
 18e:	08 2e       	mov	r0, r24
 190:	89 2f       	mov	r24, r25
 192:	00 0c       	add	r0, r0
 194:	88 1f       	adc	r24, r24
 196:	99 0b       	sbc	r25, r25
 198:	00 0c       	add	r0, r0
 19a:	88 1f       	adc	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	83 70       	andi	r24, 0x03	; 3
 1a0:	8e 2b       	or	r24, r30
 1a2:	85 b9       	out	0x05, r24	; 5
	pos++; // Increase data position index
 1a4:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <__data_end>
 1a8:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <__data_end+0x1>
 1ac:	01 96       	adiw	r24, 0x01	; 1
	if(pos >= DLEN) // end of display data
 1ae:	88 34       	cpi	r24, 0x48	; 72
 1b0:	91 05       	cpc	r25, r1
 1b2:	28 f4       	brcc	.+10     	; 0x1be <__vector_11+0x118>
	// LED control.
	PORTC &= ~0b111111;
	PORTC |= ~font[(int)str[pos / 6]][pos % 6] & 0b111111; // 6LSB
	PORTB &= ~0b11;
	PORTB |= ( ~font[(int)str[pos / 6]][pos % 6] >> 6) & 0b11; // 2MSB
	pos++; // Increase data position index
 1b4:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <__data_end+0x1>
 1b8:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <__data_end>
 1bc:	0e c0       	rjmp	.+28     	; 0x1da <__vector_11+0x134>
	if(pos >= DLEN) // end of display data
	{
		pos=0;
 1be:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <__data_end+0x1>
 1c2:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <__data_end>
		TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // stop timer
 1c6:	e1 e8       	ldi	r30, 0x81	; 129
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	88 7f       	andi	r24, 0xF8	; 248
 1ce:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1A); // Disable timer interrupt
 1d0:	ef e6       	ldi	r30, 0x6F	; 111
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	80 83       	st	Z, r24
	}
	TIFR1 &= ~(1<<OCF1A); // clear flag
 1da:	b1 98       	cbi	0x16, 1	; 22

}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__vector_1>:

// EXTINT 0 (Photo interrupter) ISR
ISR(INT0_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
	TIMSK1 |= (1 << OCIE1A); // Enable timer interrupt
 212:	ef e6       	ldi	r30, 0x6F	; 111
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	80 83       	st	Z, r24
	TCNT1 = 0; // Reset Counter
 21c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 220:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1B |= (1 << CS11); // Timer prescaler to CLK/8
 224:	e1 e8       	ldi	r30, 0x81	; 129
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	80 83       	st	Z, r24
	EIFR &= ~(1 << INTF0); // Clear flag
 22e:	e0 98       	cbi	0x1c, 0	; 28
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	8f 91       	pop	r24
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <main>:

// Main program
int main()
{
	// Initialization
	DDRD&= ~(1 << PORTD2); // Set INT0 as input
 240:	52 98       	cbi	0x0a, 2	; 10
	PORTC |= 0x3F; // turn LEDs off
 242:	88 b1       	in	r24, 0x08	; 8
 244:	8f 63       	ori	r24, 0x3F	; 63
 246:	88 b9       	out	0x08, r24	; 8
	PORTB |= 0x03;
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	83 60       	ori	r24, 0x03	; 3
 24c:	85 b9       	out	0x05, r24	; 5
	DDRC |= 0x3F; // set led ports to output
 24e:	87 b1       	in	r24, 0x07	; 7
 250:	8f 63       	ori	r24, 0x3F	; 63
 252:	87 b9       	out	0x07, r24	; 7
	DDRB |= 0x03;
 254:	84 b1       	in	r24, 0x04	; 4
 256:	83 60       	ori	r24, 0x03	; 3
 258:	84 b9       	out	0x04, r24	; 4
	EICRA = (1 << ISC01); // EXTINT 0 on falling edge.
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1 << INT0); // enable extint0
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0; // No comp. output
 264:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM12); // CTC mode
 268:	88 e0       	ldi	r24, 0x08	; 8
 26a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = TVAL; // Comparator value
 26e:	88 ee       	ldi	r24, 0xE8	; 232
 270:	93 e0       	ldi	r25, 0x03	; 3
 272:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 276:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCNT1 = 0; // reset counter
 27a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 27e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	sei(); // Enable global interrupt
 282:	78 94       	sei
 284:	ff cf       	rjmp	.-2      	; 0x284 <main+0x44>

00000286 <__umulhisi3>:
 286:	a2 9f       	mul	r26, r18
 288:	b0 01       	movw	r22, r0
 28a:	b3 9f       	mul	r27, r19
 28c:	c0 01       	movw	r24, r0
 28e:	a3 9f       	mul	r26, r19
 290:	70 0d       	add	r23, r0
 292:	81 1d       	adc	r24, r1
 294:	11 24       	eor	r1, r1
 296:	91 1d       	adc	r25, r1
 298:	b2 9f       	mul	r27, r18
 29a:	70 0d       	add	r23, r0
 29c:	81 1d       	adc	r24, r1
 29e:	11 24       	eor	r1, r1
 2a0:	91 1d       	adc	r25, r1
 2a2:	08 95       	ret

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
